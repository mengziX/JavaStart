Day08
代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，
同步代码块(多线程讲解)   
局部代码块 在方法中出现；限定变量生命周期，及早释放，提高内存利用率构造代码块 
在类中方法外出现(在类中的成员位置,用{}括起来的代码),多个构造方法方法中相同的代码存放到一起，每次调用构造方法执行前，都会先执行构造代码块。
作用：可以把多个构造方法中的共同代码放到一起，对对象进行初始化。静态代码块 在类中方法外出现，加了static修饰在类中方法外出现，并加上static修饰；
用于给类进行初始化，在加载的时候就执行，并且值执行一次。
作用：一般是对类进行初始化

Day12
API:
Scanner
String 
	 	* public String():空构造
		* public String(byte[] bytes):把字节数组转成字符串
		* public String(byte[] bytes,int index,int length):把字节数组的一部分转成字符串
		* public String(char[] value):把字符数组转成字符串
		* public String(char[] value,int index,int count):把字符数组的一部分转成字符串
		* public String(String original):把字符串常量值转成字符串
    
    * boolean equals(Object obj):比较字符串的内容是否相同,区分大小写
		* boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写
		* boolean contains(String str):判断大字符串中是否包含小字符串
		* boolean startsWith(String str):判断字符串是否以某个指定的字符串开头
		* boolean endsWith(String str):判断字符串是否以某个指定的字符串结尾
		* boolean isEmpty():判断字符串是否为空。
		* 
		* ""和null的区别
		* ""是字符串常量,同时也是一个String类的对象,既然是对象当然可以调用String类中的方法
		* null是空常量,不能调用任何的方法,否则会出现空指针异常,null常量可以给任意的引用数据类型赋值
    
    * * int length():获取字符串的长度。
	* char charAt(int index):获取指定索引位置的字符
	* int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。
	* int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。
	* int indexOf(int ch,int fromIndex):返回指定字符在此字符串中从指定位置后第一次出现处的索引。
	* int indexOf(String str,int fromIndex):返回指定字符串在此字符串中从指定位置后第一次出现处的索引。
	* lastIndexOf
	* String substring(int start):从指定位置开始截取字符串,默认到末尾。
	* String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。
  
  * byte[] getBytes():把字符串转换为字节数组。
		* char[] toCharArray():把字符串转换为字符数组。
		* static String valueOf(char[] chs):把字符数组转成字符串。
		* static String valueOf(int i):把int类型的数据转成字符串。
			* 注意：String类的valueOf方法可以把任意类型的数据转成字符串。
	
		* String toLowerCase():把字符串转成小写。(了解)
		* String toUpperCase():把字符串转成大写。
		* String concat(String str):把字符串拼接。
    
    * A:String的替换功能及案例演示
			* String replace(char old,char new)
			* String replace(String old,String new)
		* B:String的去除字符串两空格及案例演示
			* String trim()
		* C:String的按字典顺序比较两个字符串及案例演示
			* int compareTo(String str)(暂时不用掌握)
			* int compareToIgnoreCase(String str)(了解)
      
      
Day15
     集合框架(集合的遍历之迭代器遍历)
     
     A:迭代器原理
	* 迭代器原理:迭代器是对集合进行遍历,而每一个集合内部的存储结构都是不同的,所以每一个集合存和取都是不一样,那么就需要在每一个类中定义hasNext()和next()方法,这样做是可以的,但是会让整个集合体系过于臃肿,迭代器是将这样的方法向上抽取出接口,然后在每个类的内部,定义自己迭代方式,这样做的好处有二,第一规定了整个集合体系的遍历方式都是hasNext()和next()方法,第二,代码有底层内部实现,使用者不用管怎么实现的,会用即可 
  * B:迭代器源码解析
	* 1,在eclipse中ctrl + shift + t找到ArrayList类
	* 2,ctrl+o查找iterator()方法
	* 3,查看返回值类型是new Itr(),说明Itr这个类实现Iterator接口
	* 4,查找Itr这个内部类,发现重写了Iterator中的所有抽象方法 
  
  集合框架(List集合的特有功能概述和测试)
  * A:List集合的特有功能概述
	* void add(int index,E element)
	* E remove(int index)
	* E get(int index)
	* E set(int index,E element)
    
  集合框架(并发修改异常产生的原因及解决方案)
* A:案例演示
	* 需求：我有一个集合，请问，我想判断里面有没有"world"这个元素，如果有，我就添加一个"javaee"元素，请写代码实现。

			List list = new ArrayList();
			list.add("a");
			list.add("b");
			list.add("world");
			list.add("d");
			list.add("e");
			
			/*Iterator it = list.iterator();
			while(it.hasNext()) {
				String str = (String)it.next();
				if(str.equals("world")) {
					list.add("javaee");			//这里会抛出ConcurrentModificationException并发修改异常
				}
			}*/
			
			
* B:ConcurrentModificationException出现
	* 迭代器遍历，集合修改集合
* C:解决方案
	* a:迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)
	* b:集合遍历元素，集合修改元素

			ListIterator lit = list.listIterator();		//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法
			while(lit.hasNext()) {
				String str = (String)lit.next();
				if(str.equals("world")) {
					lit.add("javaee");	
					//list.add("javaee");
				}
			}
      
      集合框架(ListIterator)(了解)
      * boolean hasNext()是否有下一个
      * boolean hasPrevious()是否有前一个
      * Object next()返回下一个元素
      * Object previous();返回上一个元素
      
      集合框架(Vector的特有功能)(了解)
      * A:Vector类概述
      * B:Vector类特有功能
     	* public void addElement(E obj)
    	* public E elementAt(int index)
    	* public Enumeration elements()
      
    集合框架(List的三个子类的特点)
      ArrayList:
			底层数据结构是数组，查询快，增删慢。
			线程不安全，效率高。
		Vector:
			底层数据结构是数组，查询快，增删慢。
			线程安全，效率低。
		Vector相对ArrayList查询慢(线程安全的)
		Vector相对LinkedList增删慢(数组结构)
		LinkedList:
			底层数据结构是链表，查询慢，增删快。
			线程不安全，效率高。
     B:List有三个儿子，我们到底使用谁呢?
		查询多用ArrayList
		增删多用LinkedList
		如果都多ArrayList
