1.Java开发环境:
  1)编译运行过程:--------------常见面试题
    1.1)编译期:.java源文件，经过编译，生成.class字节码文件
    1.2)运行期:JVM加载.class并运行.class
    特点:跨平台、一次编程到处使用
  2)名词解释:------------------常见面试题
    2.1)JVM:java虚拟机
            加载.class并运行.class
    2.2)JRE:java运行环境
            除了包含JVM以外还包含了运行java程序所必须的环境
	    JRE = JVM+java系统类库(小零件)
    2.3)JDK:java开发工具包
            除了包含JRE以外还包含了开发java程序所必须的命令工具
	    JDK = JRE+编译、运行等命令工具
    说明:
      1)运行java程序的最小环境是JRE
      2)开发java程序的最小环境是JDK
  3)配置环境变量---------------------了解
    3.1)JAVA_HOME:指向jdk的安装路径
    3.2)CLASSPATH:表示类的搜索路径，一般简写为.
    3.3)PATH:指向jdk下的bin目录
2.eclipse:
  1)IBM、开源的、免费的、不需要安装仅需解压即可
  2)开发步骤:
    2.1)新建Java项目/工程--------------小区
    2.2)新建Java包---------------------楼+单元
    2.3)新建Java类---------------------房子
          main中: System.out.println("HelloWorld");
  3)注释:解释性文本
    3.1)单行注释://
    3.2)多行注释:/* */
    3.3)文档注释:/** */--------------API时讲

1.变量:存数的，代词，指代的就是它所存的那个数
  1)声明:
      int a; //声明一个整型的变量，名为a
      int b,c,d; //声明三个整型的变量，名为b,c,d
  2)初始化:第一次赋值
      int a = 250; //声明整型变量a并赋值为250
      int a;   //声明整型变量a
      a = 250; //给变量a赋值为250
      a = 360; //修改变量a的值为360
  3)使用:
    3.1)对变量的使用就是对它所存的那个数的使用
          int a = 5;
	  int b = a+10; //取出a的值5，加上10，再赋值给变量b
	  System.out.println(b);   //输出变量b的值15
	  System.out.println("b"); //输出b，双引号中的原样输出
	  a = a+10; //取出a的值5，加10后，再赋值给变量a
	            //在a本身基础之上增10
	  System.out.println(a); //15
    3.2)变量的使用必须与数据类型匹配
          int a = 3.14; //编译错误，数据类型不匹配
    3.3)变量在用之前必须声明并初始化
          System.out.println(m); //编译错误，m未声明
	  int m;
	  System.out.println(m); //编译错误，m未初始化
  4)命名:
    4.1)只能包含字母、数字、_和$符，并且不能以数字开头
    4.2)严格区分大小写
    4.3)不能使用关键字
    4.4)可以中文命名，但不建议
        建议"英文的见名知意"、"驼峰命名法"
2.基本数据类型:
  1)int:整型，4个字节，-21个多亿到21个多亿
    1.1)整数直接量默认为int类型，但不能超范围，超范围则编译错误
    1.2)两个整数相除，结果还是整数，小数位无条件舍弃(不会四舍五入)
    1.3)整数运算时若超出范围会发生溢出，溢出是需要避免的
  2)long:长整型，8个字节，很大很大很大
    2.1)长整型的直接量，需在数字后加L或l
    2.2)运算时若有可能溢出，建议在第1个数字后加L
    2.3)System.currentTimeMillis()用于获取自
        1970.1.1零时到此时此刻的毫秒数
  3)double:浮点型，8个字节，很大很大很大
    3.1)浮点数直接量默认为double型，若想表示float需在数字后加F或f
    3.2)double和float型数据参与运算时，有可能会出现舍入误差
  4)boolean:布尔型，1个字节
    4.1)只能取值为true或false
  5)char:字符型，2个字节
    5.1)采用Unicode字符集编码，每个字符对应一个码
        表现的形式是字符char，但本质上是码int(0到65535之间)
	(ASCII码: 'a'--97  'A'--65  '0'--48)
    5.2)字符型直接量必须放在单引号中，只能有一个
    5.3)特殊符号需要通过\来转义
3.基本数据类型间的转换:
    数据类型从小到大依次为:
       byte-short-int-long-float-double
             char-
  1)两种方式:
    1.1)自动类型转换:小类型到大类型
    1.2)强制类型转换:大类型到小类型
          语法: (要转换成为的数据类型)变量
          强转有可能会发生溢出或精度的丢失
  2)两点规则:
    2.1)整数直接量可以直接赋值给byte、short、char，
        但不能超出范围
    2.2)byte、short、char型数据参与运算时，
        先一律转换为int再运算
4.Scanner接收用户的输入:
  1)在package下:
      import java.util.Scanner;
  2)在main中:
      Scanner scan = new Scanner(System.in);
  3)在第2步之下:
      System.out.println("请输入年龄:");
      int age = scan.nextInt();
      System.out.println("请输入价格:");
      double price = scan.nextDouble();

1.运算符:
  1)算术运算符:+,-,*,/,%,++,--
  2)关系运算符:>,<,>=,<=,==,!= boolean
  3)逻辑运算符:&&,||,! boolean
  4)赋值运算符:=,+=,-=,*=,/=,%=
  5)字符串连接运算符:+
  6)三目/条件运算符: boolean?数1:数2
2.分支结构:基于条件的执行
  1)if结构:1条路
  2)if...else结构:2条路

1.分支结构:
  3)if...else if结构:多条路
  4)switch...case结构:多条路
    优点:效率高、结构清晰
    缺点:整数、相等
    break:跳出switch
2.循环:反复多次执行一段相同或相似的代码
3.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在整个循环过程中所反复改变的那个数
4.循环结构:
  1)while结构:先判断后执行，有可能一次都不执行
  2)do...while结构:先执行后判断，至少执行一次
                   要素1与要素3相同时，首选do...while

1.循环结构:
  3)for:固定次数循环，应用率最高
2.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环
3.三种循环结构的更佳适用情况:
  1)while:"当..."
  2)do...while:"直到..."
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
4.嵌套循环:
  1)循环中套循环，一般多行多列时使用，外层控制行，内层控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套层数越少越好，能一层就不用两层，能两层就不用三层
    若业务必须通过三层以上的循环来解决，说明你的设计有问题
  4)break只能跳出一层循环
5.程序=算法+数据结构
  1)算法:解决问题的步骤/流程(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
    设计良好的/合理的数据结构会导致好的算法
6.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
      int[] arr = {1,4,6,8}; //1,4,6,8
      int[] arr = new int[]{1,4,6,8}; //1,4,6,8
      int[] arr;
      arr = {1,4,6,8}; //编译错误，此方式只能声明同时初始化
      arr = new int[]{1,4,6,8}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度(元素的个数)
          int[] arr = new int[4];
	  System.out.println(arr.length); //4
    5.2)通过下标/索引来访问数组中的元素
        下标从0开始，最大到(数组的长度-1)
	  int[] arr = new int[3];
	  arr[0] = 100; //给第1个元素赋值为100
	  arr[1] = 200; //给第2个元素赋值为200
	  arr[2] = 300; //给第3个元素赋值为300
	  //arr[3] = 400; //数组下标越界异常
	  System.out.println(arr[arr.length-1]); //输出最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
      for(int i=0;i<arr.length;i++){
        arr[i] = (int)(Math.random()*100);
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }

1.数组:
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);
    7.2)int[] a1 = Arrays.copyOf(a,6);
        a = Arrays.copyOf(a,a.length+1); //数组的扩容
  8)数组的排序:
    8.1)Arrays.sort(arr);
2.方法:函数、过程
  1)封装一段特定的业务逻辑功能
  2)尽可能独立，一个方法只干一件事
  3)方法可以被反复多次的调用
  4)减少代码的重复，有利于代码的维护，有利于团队的协作
3.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
      方法体
    }
4.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
5.return:
  1)return;    //1.1)结束方法的执行
  2)return 值; //2.1)结束方法的执行 2.2)返回结果给调用方

 1)将字符串转换为字符数组:
      char[] input = str.toCharArray();
  2)将字符串转换为大写字母:
      str = str.toUpperCase();
    将字符串转换为小写字母
      str = str.toLowerCase();
